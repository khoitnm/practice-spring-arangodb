<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.tnmk.skeleton.practice-spring-arangodb</groupId>
    <artifactId>common-arangodb-test</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <java.version>8</java.version>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <spring-boot.version>2.2.1.RELEASE</spring-boot.version>
        <arangodb-spring-data.version>3.2.3</arangodb-spring-data.version>

        <spock-spring.version>1.3-groovy-2.5</spock-spring.version>
        <groovy.version>2.5.8</groovy.version>
        <gmavenplus-plugin.version>1.8.1</gmavenplus-plugin.version>

        <testcontainers.version>1.12.4</testcontainers.version>
    </properties>

    <dependencies>
        <!--
        I don't want to use testcontainers-java-module-arangodb because it uses the old testctonainers version and was not updated in more than a whole year
        And it's inherited from the old version parent pom, hence I cannot override their dependencies.
        So I have to copy its code and override their dependencies.
        -->

<!--        <dependency>-->
<!--            <groupId>io.github.ganchix</groupId>-->
<!--            <artifactId>testcontainers-java-module-arangodb</artifactId>-->
<!--            <version>0.0.1</version>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <version>${testcontainers.version}</version>
        </dependency>

<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-autoconfigure</artifactId>-->
<!--            <scope>provided</scope>-->
<!--        </dependency>-->
        <dependency>
            <groupId>com.arangodb</groupId>
            <artifactId>arangodb-spring-data</artifactId>
            <version>${arangodb-spring-data.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>


        <!-- Spock -->
        <dependency>
            <groupId>org.spockframework</groupId>
            <artifactId>spock-spring</artifactId>
            <version>${spock-spring.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.spockframework</groupId>
            <artifactId>spock-core</artifactId>
            <version>${spock-spring.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <!--
            Since version 2.5, there's no more groovy-all.jar, it was changed to pom
            Hence we should import groovy-specific dependencies rather than using groovy-all
            -->
            <artifactId>groovy-test</artifactId>
            <version>${groovy.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <!-- SPRING FRAMEWORK DEPENDENCIES MANAGEMENT-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <!-- And since Spock is based on Groovy, we have to add and configure the gmavenplus-plugin as well to be able to use this language in our tests -->
                <groupId>org.codehaus.gmavenplus</groupId>
                <artifactId>gmavenplus-plugin</artifactId>
                <version>${gmavenplus-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compileTests</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
